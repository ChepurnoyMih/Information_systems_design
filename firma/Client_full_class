using Newtonsoft.Json;
using YamlDotNet.Serialization;
public class Client
{
    private int _id_Client;
    private string _surname;
    private string _name;
    private string _patronymic;
    private string _email;
    private string _comment;

    public Client() { }

    public int ID_Client
    {
        get { return _id_Client; }
        set
        {
            if (ValidateID(value))
                _id_Client = value;
            else
                throw new ArgumentException("Некорректный ID");
        }
    }

    public string Surname
    {
        get { return _surname; }
        set
        {
            if (ValidateString(value))
                _surname = value;
            else
                throw new ArgumentException("Некорректная фамилия");
        }
    }

    public string Name
    {
        get { return _name; }
        set
        {
            if (ValidateString(value)) 
                _name = value;
            else
                throw new ArgumentException("Некорректное имя");
        }
    }

    public string Patronymic
    {
        get { return _patronymic; }
        set
        {
            if (ValidateString(value))
                _patronymic = value;
            else
                throw new ArgumentException("Некорректное отчество");
        }
    }

    public string Email
    {
        get { return _email; }
        set
        {
            if (ValidateEmail(value))
                _email = value;
            else
                throw new ArgumentException("Некорректный email");
        }
    }

    public string Comment
    {
        get { return _comment; }
        set
        {
            if (ValidateString(value))
                _comment = value;
            else
                throw new ArgumentException("Некорректный комментарий");
        }
    }

    // Методы валидации
    public static bool ValidateID(int id) => id > 0;

    private static bool ValidateString(string value) => !string.IsNullOrWhiteSpace(value);

    public static bool ValidateEmail(string email) => !string.IsNullOrEmpty(email) && email.Contains("@");
    //конструктор
    public Client(int id, string surname, string name, string patronymic, string email, string comment)
    {
        ID_Client = id;
        Surname = surname;
        Name = name;
        Patronymic = patronymic;
        Email = email;
        Comment = comment;
    }


    // Статический метод для загрузки клиентов из JSON
    public static Client[] LoadFromJsonString(string jsonString)
    {
        if (string.IsNullOrWhiteSpace(jsonString))
        {
            throw new ArgumentException("JSON-строка не может быть пустой или содержать только пробелы.", nameof(jsonString));
        }

        try
        {
            // Десериализуем JSON в массив объектов Client
            return JsonConvert.DeserializeObject<Client[]>(jsonString);
        }
        catch (Exception ex)
        {
            throw new Exception($"Ошибка при загрузке клиентов из JSON-строки: {ex.Message}");
        }
    }


    public void PrintClientInfo()
    {
        Console.WriteLine($"Client ID: {ID_Client}");
        Console.WriteLine($"Full name: {Surname} {Name} {Patronymic}");
        Console.WriteLine($"Email: {Email}");
        Console.WriteLine($"Comment: {Comment}");
    }

    // Конструктор без email и комментария
    public Client(int id, string surname, string name, string patronymic)
     : this(id, surname, name, patronymic, null, null) { }

    // Конструктор без отчества
    public Client(int id, string surname, string name, string email, string comment)
     : this(id, surname, name, string.Empty, email, comment) { }

    // Метод для краткого вывода информации
    public void PrintShortInfo()
    {
        Console.WriteLine($"Client ID: {ID_Client}, Name: {Name}, Surname: {Surname}");
    }

    // Переопределение Equals() для сравнения объектов
    public override bool Equals(object obj)
    {
        if (obj is Client other)
        {
            return ID_Client == other.ID_Client &&
            Surname == other.Surname &&
            Name == other.Name &&
            Patronymic == other.Patronymic &&
            Email == other.Email &&
            Comment == other.Comment;
        }
        return false;
    }

    // Переопределение GetHashCode()
    public override int GetHashCode() => ID_Client;

    // Перегрузка операторов
    public static bool operator ==(Client left, Client right) => Equals(left, right);
    public static bool operator !=(Client left, Client right) => !Equals(left, right);

    

    
}
