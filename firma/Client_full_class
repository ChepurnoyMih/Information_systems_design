using System;
using System.Collections.Generic; // Для использования List
using System.Text.RegularExpressions; // Для регулярных выражений
using System.Text.Json; // Для JSON сериализации
using System.IO; // Для работы с файловой системой
using System.Xml.Serialization; // Для XML сериализации

namespace HotelManagement
{
    // Интерфейс для работы с клиентами
    public interface IClient
    {
        string ToShortString();
        void Validate();
    }

    public class Client : IClient
    {
        public int ID_Client { get; private set; }
        public string Surname { get; private set; }
        public string Name { get; private set; }
        public string Patronymic { get; private set; }
        public string Email { get; private set; }
        public string Comment { get; private set; }
        public string PhoneNumber { get; private set; }

        public Client() { } // Конструктор по умолчанию

        public Client(int id_client, string surname, string name, string patronymic, string email, string comment, string phoneNumber)
        {
            ID_Client = id_client;
            Surname = ValidateString(surname, nameof(Surname));
            Name = ValidateString(name, nameof(Name));
            Patronymic = ValidateString(patronymic, nameof(Patronymic));
            Email = ValidateEmail(email);
            Comment = ValidateString(comment, nameof(Comment));
            PhoneNumber = ValidatePhoneNumber(phoneNumber);
        }

        public Client(string json)
        {
            var client = JsonSerializer.Deserialize<Client>(json);
            ID_Client = client.ID_Client;
            Surname = client.Surname;
            Name = client.Name;
            Patronymic = client.Patronymic;
            Email = client.Email;
            Comment = client.Comment;
            PhoneNumber = client.PhoneNumber;
        }

        public Client(string dataString)
        {
            try
            {
                string[] data = dataString.Split(';');
                if (data.Length != 4)
                {
                    throw new ArgumentException("Неверный формат входной строки.");
                }

                string[] nameParts = data[0].Split(' ');
                if (nameParts.Length < 2 || nameParts.Length > 3)
                {
                    throw new ArgumentException("Неверный формат имени (Фамилия Имя [Отчество]).");
                }

                Surname = ValidateString(nameParts[0], nameof(Surname));
                Name = ValidateString(nameParts[1], nameof(Name));
                Patronymic = nameParts.Length == 3 ? ValidateString(nameParts[2], nameof(Patronymic)) : "";
                Email = ValidateEmail(data[1]);
                PhoneNumber = ValidatePhoneNumber(data[2]);
                Comment = ValidateString(data[3], nameof(Comment));

                // ID_Client устанавливается на -1, так как он не может быть получен из строки
                ID_Client = -1; 
            }
            catch (Exception ex)
            {
                throw new ArgumentException($"Ошибка при создании объекта Client из строки: {ex.Message}");
            }
        }

        public void Validate()
        {
            ValidateString(Surname, nameof(Surname));
            ValidateString(Name, nameof(Name));

            ValidateEmail(Email);
            ValidatePhoneNumber(PhoneNumber);
            // Можно добавить дополнительные проверки, если нужно
        }

        private static string ValidateString(string value, string fieldName, int maxLength = 255)
        {
            if (string.IsNullOrWhiteSpace(value))
            {
                throw new ArgumentException($"Поле '{fieldName}' не может быть пустым или содержать только пробелы.");
            }
            if (value.Length > maxLength)
            {
                throw new ArgumentException($"Поле '{fieldName}' превышает максимальную длину в {maxLength} символов.");
            }
            return value.Trim();
        }

        private static string ValidateEmail(string email)
        {
            if (string.IsNullOrWhiteSpace(email)) return null;
            string pattern = @"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$";
            if (!Regex.IsMatch(email, pattern))
            {
                throw new ArgumentException("Неверный формат email.");
            }
            return email.Trim();
        }

        private static string ValidatePhoneNumber(string phoneNumber)
        {
            if (string.IsNullOrWhiteSpace(phoneNumber)) return null;
            string pattern = @"^\+?[1-9]\d{1,14}$"; // Допускает + и от 1 до 15 цифр
            if (!Regex.IsMatch(phoneNumber, pattern))
            {
                throw new ArgumentException("Неверный формат телефонного номера.");
            }
            return phoneNumber;
        }

        public override string ToString()
        {
            return $"ID: {ID_Client}, Surname: {Surname}, Name: {Name}, Patronymic: {Patronymic}, Email: {Email}, Phone: {PhoneNumber}, Comment: {Comment}";
        }

        public string ToShortString()
        {
            return $"{Surname} {Name[0]}.{(Patronymic.Length > 0 ? Patronymic[0].ToString() : "")}. Phone: {PhoneNumber}";
        }

        public static bool operator ==(Client c1, Client c2)
        {
            if (ReferenceEquals(c1, c2)) return true;
            if (ReferenceEquals(c1, null) || ReferenceEquals(c2, null)) return false;
            return c1.ID_Client == c2.ID_Client;
        }

        public static bool operator !=(Client c1, Client c2)
        {
            return !(c1 == c2);
        }

        public override bool Equals(object obj)
        {
            return this == (Client)obj;
        }

        public override int GetHashCode()
        {
            return ID_Client.GetHashCode();
        }
    }

    public class ClientSummary : Client
    {
        public ClientSummary(Client client)
        {
            ID_Client = client.ID_Client;
            Surname = client.Surname;
            Name = client.Name;
            Patronymic = client.Patronymic;
            PhoneNumber = client.PhoneNumber; // добавляем только нужные поля
        }

        public override string ToString()
        {
            return $"{Surname} {Name[0]}.{(Patronymic.Length > 0 ? Patronymic[0].ToString() : "")}. Phone: {PhoneNumber}";
        }
    }

    // Класс для управления списком клиентов
    public class ClientManager
    {
        private List<Client> clients = new List<Client>();
        private int nextId = 1;

        public void AddClient(Client client)
        {
            client.Validate(); // Валидация клиента перед добавлением
            client.GetType().GetProperty("ID_Client").SetValue(client, nextId++);
            clients.Add(client);
        }

        public bool RemoveClient(int id)
        {
            var client = clients.Find(c => c.ID_Client == id);
            if (client != null)
            {

                clients.Remove(client);
                return true;
            }
            return false;
        }

        public Client GetClient(int id)
        {
            return clients.Find(c => c.ID_Client == id);
        }

        public IEnumerable<Client> GetAllClients()
        {
            return clients;
        }

        // Сериализация в JSON
        public void SaveToJson(string filePath)
        {
            var json = JsonSerializer.Serialize(clients);
            File.WriteAllText(filePath, json);
        }

        // Десериализация из JSON
        public void LoadFromJson(string filePath)
        {
            if (File.Exists(filePath))
            {
                var json = File.ReadAllText(filePath);
                clients = JsonSerializer.Deserialize<List<Client>>(json);
                nextId = clients.Count > 0 ? clients[^1].ID_Client + 1 : 1; // Установка следующего ID
            }
        }

        // Сериализация в XML
        public void SaveToXml(string filePath)
        {
            var xmlSerializer = new XmlSerializer(typeof(List<Client>));
            using (var stream = new FileStream(filePath, FileMode.Create))
            {
                xmlSerializer.Serialize(stream, clients);
            }
        }

        // Десериализация из XML
        public void LoadFromXml(string filePath)
        {
            if (File.Exists(filePath))
            {
                var xmlSerializer = new XmlSerializer(typeof(List<Client>));
                using (var stream = new FileStream(filePath, FileMode.Open))
                {
                    clients = (List<Client>)xmlSerializer.Deserialize(stream);
                    nextId = clients.Count > 0 ? clients[^1].ID_Client + 1 : 1; // Установка следующего ID
                }
            }
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Hello World!");

            // Создание менеджера клиентов
            ClientManager manager = new ClientManager();

            // Пример добавления клиентов
            Client client1 = new Client(0, "Иванов", "Иван", "Иванович", "ivanov@example.com", "Регулярный клиент", "+79876543210");
            manager.AddClient(client1);

            Client client2 = new Client("Петров Петр Петрович;petrov@example.com;+79987654321;Постоянный клиент");
            manager.AddClient(client2);

            // Сохранение в JSON
            manager.SaveToJson("clients.json");
            Console.WriteLine("Данные клиентов сохранены в clients.json.");

            // Сохранение в XML
            manager.SaveToXml("clients.xml");
            Console.WriteLine("Данные клиентов сохранены в clients.xml.");

            // Очистим менеджер и загрузим из JSON
            manager = new ClientManager();
            manager.LoadFromJson("clients.json");
            Console.WriteLine("Данные клиентов загружены из clients.json:");
            foreach (var client in manager.GetAllClients())
            {
                Console.WriteLine(client.ToString());
            }

            // Очистим менеджер и загрузим из XML
            manager = new ClientManager();
            manager.LoadFromXml("clients.xml");
            Console.WriteLine("Данные клиентов загружены из clients.xml:");
            foreach (var client in manager.GetAllClients())
            {
                Console.WriteLine(client.ToString());
            }
        }
    }
}
